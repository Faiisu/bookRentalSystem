from fastapi import FastAPI, Depends, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from database import get_sqldb  # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MySQL
from mySQL_models import CreateUser  # Import Pydantic Schema

app = FastAPI()

#################### CORS #####################
origins = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

#################### SQL #####################
# ‚úÖ ‡πÉ‡∏ä‡πâ `cursor.execute()` ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á GET ‡πÅ‡∏•‡∏∞ POST

@app.get("/users")
def get_users(db=Depends(get_sqldb)):
    with db.cursor() as cursor:
        cursor.execute("SELECT email FROM users")  # üîπ ‡∏´‡πâ‡∏≤‡∏°‡∏î‡∏∂‡∏á password ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        users = cursor.fetchall()
    return {"users": users}

@app.post("/users")
def add_user(user: CreateUser, db=Depends(get_sqldb)):
    with db.cursor() as cursor:
        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Email ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        cursor.execute("SELECT email FROM users WHERE email = %s", (user.email,))
        existing_user = cursor.fetchone()
        if existing_user:
            raise HTTPException(status_code=400, detail="Email already registered")

        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° User ‡πÉ‡∏´‡∏°‡πà
        cursor.execute(
            "INSERT INTO users (email, password) VALUES (%s, %s)", 
            (user.email, user.password)
        )
        db.commit()  # üîπ ‡∏ï‡πâ‡∏≠‡∏á commit() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á MySQL
        user_id = cursor.lastrowid  # ‚úÖ ‡πÑ‡∏î‡πâ ID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

    return {"id": user_id, "email": user.email}

@app.delete("/users/{email}")
def delete_user(email: str, db=Depends(get_sqldb)):
    with db.cursor() as cursor:
        cursor.execute("SELECT email FROM users WHERE email = %s", email)
        existing_user = cursor.fetchone()
        if not existing_user:
            raise HTTPException(status_code=404, detail="User not found")
        
        cursor.execute("DELETE FROM users WHERE email = %s", email)
        db.commit()
    return {"Message" : f"User {email} deleted successfully"}


#################### MongoDB #####################
# add data into MongoDB
@app.post("/add/")
async def add_item(item: dict):
    result = await mongo_collection["myCollection"].insert_one(item)
    return {"inserted_id": str(result.inserted_id)}

# query all.
@app.get("/items/")
async def get_items():
    items = []
    async for item in mongo_collection["myCollection"].find():
        item["_id"] = str(item["_id"])  # ‡πÅ‡∏õ‡∏•‡∏á ObjectId ‡πÄ‡∏õ‡πá‡∏ô string
        items.append(item)
    return items

# query from ID.
@app.get("/items/{item_id}")
async def get_item(item_id: str):
    item = await mongo_collection["myCollection"].find_one({"_id": ObjectId(item_id)})
    if item:
        item["_id"] = str(item["_id"])
        return item
    return {"error": "Item not found"}

# delete by ID
@app.delete("/items/{item_id}")
async def delete_item(item_id: str):
    result = await mongo_collection["myCollection"].delete_one({"_id": ObjectId(item_id)})
    if result.deleted_count:
        return {"message": "Deleted successfully"}
    return {"error": "Item not found"}